{
	// Place your CS101 workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"template for cs101": {
		"prefix": "cs101",
		"body": [
			"#include<iostream>",
			"// #include<iomanip>",
			"// #include<string>",
			"// #include<algorithm>",
			"",
			"using namespace std;",
			"",
			"int main() {",
			"\t$1",
			"}",
			""
		],
		"description": "template for cs101"
	},
	"template for fast io": {
		"prefix": "fastio",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"",
			"int main() {",
			"    ios_base::sync_with_stdio(false);  // prevents sync C++ streams w C streams",
			"    cin.tie(NULL);                     // disables flushing of cout before reading cin",
			"",
			"    $1",
			"",
			"    return 0;",
			"}"
		],
		"description": "template for fast io"
	},
	"template for simplecpp": {
		"prefix": "simplecpp",
		"body": [
			"#include <simplecpp>",
			"",
			"main_program {",
			"",
			"    $1",
			"",
			"    turtleSim();",
			"",
			"    $2",
			"",
			"    hide();",
			"    getClick();",
			"}",
			""
		],
		"description": "template for simplecpp"
	},
	"debug_macros": {
		"prefix": "debug_macros",
		"body": [
			"#define DEBUG 1",
			"",
			"#if DEBUG",
			"    #define LOG std::cerr",
			"#else",
			"    #define LOG if (false) std::cerr",
			"#endif",
			"",
			"#define DBG(x) LOG << #x << \" = \" << (x) << \" \"",
			"#define NL LOG << '\\n'",
			""
		],
		"description": "Debug Macros for printing variables LOG for debug mode"
	},
	"debug_macros_containers": {
		"prefix": "debug_macros_containers",
		"body": [
			"// overloading ostream to print containers with commas",
			"template<typename T>",
			"std::ostream& operator<<(std::ostream& os, const std::vector<T>& v) {",
			"    os << \"[\";",
			"    for (auto it = v.begin(); it != v.end(); ++it) os << (it != v.begin() ? \", \" : \"\") << *it;",
			"    return os << \"]\";",
			"}",
			"",
			"template<typename T, size_t N>",
			"std::ostream& operator<<(std::ostream& os, const std::array<T, N>& arr) {",
			"    os << \"[\";",
			"    for (size_t i = 0; i < N; ++i) os << (i ? \", \" : \"\") << arr[i];",
			"    return os << \"]\";",
			"}",
			"",
			"template<typename T>",
			"std::ostream& operator<<(std::ostream& os, const std::set<T>& s) {",
			"    os << \"{\";",
			"    for (auto it = s.begin(); it != s.end(); ++it) os << (it != s.begin() ? \", \" : \"\") << *it;",
			"    return os << \"}\";",
			"}",
			"",
			"template<typename K, typename V>",
			"std::ostream& operator<<(std::ostream& os, const std::map<K, V>& m) {",
			"    os << \"{\";",
			"    for (auto it = m.begin(); it != m.end(); ++it) os << (it != m.begin() ? \", \" : \"\") << it->first << \": \" << it->second;",
			"    return os << \"}\";",
			"}",
			""
		],
		"description": "Debug Macros for printing containers by overloading ostream"

	}
}